package se.lexicon.workshopjpa.repository;

import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Order;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.orm.jpa.DataJpaTest;
import se.lexicon.workshopjpa.entity.AppUser;
import se.lexicon.workshopjpa.entity.Details;
import java.time.LocalDate;
import java.util.List;
import java.util.stream.Collectors;
import java.util.stream.StreamSupport;

import static org.assertj.core.api.AssertionsForClassTypes.assertThat;
import static org.junit.jupiter.api.Assertions.*;

@DataJpaTest
class AppUserRepositoryTest {

    @Autowired
    private AppUserRepository appUserRepository;
    @Autowired
    private DetailsRepository detailsRepository;

    @Test
   // @Order(1)
    @DisplayName("Test Save Method")
    void testSaveAppUser() {

        //scenario
        Details details = new Details("test.test@test.com", "Test", LocalDate.of(1990, 1, 1));
        detailsRepository.save(details);
        AppUser appUser = new AppUser("admin", "password", details);

        //test method
        AppUser saved = appUserRepository.save(appUser);

        //verify
        assertThat(saved.getId()).isNotNull();
    }

    @Test
    @DisplayName("Test FindByUserName")
    void testFindByUsername(){

        //scenario
        Details details = new Details("test.test@test.com", "Test", LocalDate.of(1990, 1, 1));
        detailsRepository.save(details);
        AppUser appUser = new AppUser("admin", "password", details);
        appUserRepository.save(appUser);

        //test method
        AppUser result = appUserRepository.findByUsername("admin");

        //verify
        assertNotNull(result);
        assertEquals(appUser, result);
    }

    @Test
    @DisplayName("Test FindByUserDetailsEmail")
    void testFindByUserDetailsEmail() {

        //scenario
        Details details = new Details("test.test@test.com", "Test", LocalDate.of(1990, 1, 1));
        detailsRepository.save(details);
        AppUser appUser = new AppUser("admin", "password", details);
        appUserRepository.save(appUser);

        //test method
        AppUser result = appUserRepository.findByUserDetailsEmail("test.test@test.com");

        //verify
        assertNotNull(result);
        assertEquals(appUser, result);
    }

    @Test
    @DisplayName("Test FindByUserDetailsId")
    void testFindByUserDetailsId() {

        //scenario
        Details details = new Details("test.test@test.com", "Test", LocalDate.of(1990, 1, 1));
        detailsRepository.save(details);
        AppUser appUser = new AppUser("admin", "password", details);
        appUserRepository.save(appUser);

        //test method
        AppUser result = appUserRepository.findByUserDetailsId(details.getId());

        assertNotNull(result);
        assertEquals(appUser, result);
    }

    @Test
    @DisplayName("Test FindByRegDateIsBetween")
    void testFindByRegDateIsBetween() {

        //scenario
        Details details1 = new Details("test1.test@test.com", "Test1", LocalDate.of(1990, 1, 1));
        detailsRepository.save(details1);
        Details details2 = new Details("test2.test@test.com", "Test2", LocalDate.of(1990, 1, 1));
        detailsRepository.save(details2);

        AppUser appUser1 = new AppUser("admin1", "password", details1);
        appUserRepository.save(appUser1);
        AppUser appUser2 = new AppUser("admin2", "password", details2);
        appUserRepository.save(appUser2);

        //test method
        List<AppUser> result = appUserRepository.findByRegDateIsBetween(LocalDate.of(2020, 1, 1), LocalDate.of(2025, 12, 31));

        assertThat(result.size()).isEqualTo(2);
    }

    //extra test generated by AI
    @Test
    @DisplayName("Test Find All AppUsers")
    void testFindAll() {
        // scenario
        Details details1 = new Details("test1@test.com", "User1", LocalDate.of(1990, 1, 1));
        Details details2 = new Details("test2@test.com", "User2", LocalDate.of(1995, 2, 2));
        detailsRepository.save(details1);
        detailsRepository.save(details2);

        AppUser appUser1 = new AppUser("user1", "password1", details1);
        AppUser appUser2 = new AppUser("user2", "password2", details2);
        appUserRepository.save(appUser1);
        appUserRepository.save(appUser2);

        // test method - convert Iterable to List
        List<AppUser> result = StreamSupport
                .stream(appUserRepository.findAll().spliterator(), false)
                .toList();

        // verify
        assertThat(result.size()).isEqualTo(2);
        assertTrue(result.contains(appUser1));
        assertTrue(result.contains(appUser2));
    }

    @Test
    @DisplayName("Test Delete AppUser By ID")
    void testDeleteById() {
        // scenario
        Details details = new Details("delete@test.com", "DeleteMe", LocalDate.of(1980, 5, 5));
        detailsRepository.save(details);

        AppUser appUser = new AppUser("deleteme", "password", details);
        AppUser saved = appUserRepository.save(appUser);
        Integer savedId = saved.getId();

        // pre-condition check
        assertNotNull(appUserRepository.findById(savedId).orElse(null));

        // test method
        appUserRepository.deleteById(savedId);

        // verify
        assertFalse(appUserRepository.findById(savedId).isPresent());
    }


}

